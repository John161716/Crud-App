
import java.sql.*;  // For JDBC classes like Connection, PreparedStatement, SQLException
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Thresha
 */
public class Mainform extends javax.swing.JFrame {

    /**
     * Creates new form Mainform
     */
    public Mainform() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        t1 = new javax.swing.JTextField();
        num1 = new javax.swing.JLabel();
        t2 = new javax.swing.JTextField();
        num2 = new javax.swing.JLabel();
        num3 = new javax.swing.JLabel();
        t3 = new javax.swing.JTextField();
        t4 = new javax.swing.JTextField();
        num4 = new javax.swing.JLabel();
        b4 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        num5 = new javax.swing.JLabel();
        t5 = new javax.swing.JTextField();
        num6 = new javax.swing.JLabel();
        t6 = new javax.swing.JTextField();
        t7 = new javax.swing.JTextField();
        num7 = new javax.swing.JLabel();
        num8 = new javax.swing.JLabel();
        t8 = new javax.swing.JTextField();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tab1 = new javax.swing.JTable();
        b5 = new javax.swing.JButton();
        t10 = new javax.swing.JTextField();
        t11 = new javax.swing.JTextField();
        t12 = new javax.swing.JTextField();
        num9 = new javax.swing.JLabel();
        num10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        t9 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 255, 102));

        t1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t1ActionPerformed(evt);
            }
        });

        num1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num1.setText("Property ID:");
        num1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                num1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                num1MouseExited(evt);
            }
        });

        num2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num2.setText("Property Address:");

        num3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num3.setText("Property Type: ");

        t4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t4ActionPerformed(evt);
            }
        });

        num4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num4.setText("Tenant name:");

        b4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b4.setText("Search");
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b1.setText("Save");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        num5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num5.setText("Tenant Phone Number:");

        num6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num6.setText("Rental Start Date:");

        t7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t7ActionPerformed(evt);
            }
        });

        num7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num7.setText("Rental End Date:");

        num8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num8.setText("Payment Status:");

        b2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b2.setText("Update");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b3.setText("Delete");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        tab1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Property ID", "Property Address", "Property Type", "Tenant Name", "Tenant Phone Num", "Rental Start Date", "Rental End Date", "Payment Staus", "Monthly Rent", "Payment Amount", "Last Payment Date", "Property Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tab1);

        b5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b5.setText("Exit");
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        t11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t11ActionPerformed(evt);
            }
        });

        num9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num9.setText("Monthly Rent:");

        num10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num10.setText("Payment Amount:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Last Payment:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Property Status:");

        t9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t9ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 2, 36)); // NOI18N
        jLabel3.setText("House Rental Management System");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(num1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(num3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(num2))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(b1)
                        .addGap(30, 30, 30)
                        .addComponent(b2)
                        .addGap(25, 25, 25)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(num4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(b3)
                        .addGap(32, 32, 32)
                        .addComponent(b5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(num5)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(num6)
                                .addGap(41, 41, 41)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(num7)
                                .addComponent(num8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(num9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t9, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(num10)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t12, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t11, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(t10, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(b4)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(347, 347, 347))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(num4)
                                    .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(num7)
                                    .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(num10)
                                    .addComponent(t10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b4))
                                .addGap(2, 2, 2))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(num1)
                                .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(num3)
                                    .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(num6)
                                    .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(num9)
                                    .addComponent(t9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(t12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(num2)
                                    .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(t11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(num8)
                                    .addComponent(num5)
                                    .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(t8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(104, 104, 104)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b1)
                            .addComponent(b2)
                            .addComponent(b3)
                            .addComponent(b5))))
                .addContainerGap(309, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void t1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t1ActionPerformed

    private void num1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num1MouseClicked

    }//GEN-LAST:event_num1MouseClicked

    private void num1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_num1MouseExited

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
       Connection conn = DBConnection.getConnection();
        if (conn != null){
            try {
                String sql;
                PreparedStatement pstmt ;

             if (t1.getText().trim().isEmpty()) {
                 sql = "SELECT * FROM rental_properties";
                 pstmt = conn.prepareStatement(sql);
             } else {
                     sql = "SELECT * FROM rental_properties WHERE property_id = ?";
                       pstmt = conn.prepareStatement(sql);
                     pstmt.setInt(1, Integer.parseInt(t1.getText()));
                     } 
             ResultSet rs = pstmt.executeQuery();
             
             DefaultTableModel model = (DefaultTableModel) tab1.getModel();
             model.setRowCount(0);
             while(rs.next ()){
                 int t1 = rs.getInt("property_id");               
                 String t2 = rs.getString("property_address");                   
                 String t3 = rs.getString("property_type");
                 String t4 = rs.getString("tenant_name");
                 String t5 = rs.getString("tenant_phone");
                 String t6 = rs.getString("rental_start_date");
                 String t7 = rs.getString("rental_end_date");
                 String t8 = rs.getString("monthly_rent");
                 String t9 = rs.getString("payment_status");
                 String t10 = rs.getString("last_payment_date");
                 String t11 = rs.getString("payment_amount");
                 String t12 = rs.getString("property_status");
                    model.addRow(new Object[]{t1, t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12});
                    
             }
               rs.close();
               pstmt.close();

                      
            } catch (SQLException e) {
                System.out.println("SQL Error:" + e.getMessage());
            } finally{
                DBConnection.closeConnection(conn);

            }

        }
    }//GEN-LAST:event_b4ActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
     Connection conn = DBConnection.getConnection();  // Assuming DBConnection.getConnection() handles your DB connection

        if (conn != null) {
            try {
                // Step 2: Validate the input fields
                String propertyAddress = t2.getText().trim();
                String propertyType = t3.getText().trim();
                String tenantName = t4.getText().trim();
                String tenantPhoneNumber = t5.getText().trim();
                String rentalStartDate = t6.getText().trim();
                String rentalEndDate = t7.getText().trim();
                String paymentStatus = t8.getText().trim();
                String monthlyRent = t9.getText().trim();
                String paymentAmount = t10.getText().trim();
                String lastPaymentDate = t11.getText().trim();
                String propertyStatus = t12.getText().trim();

               
                if (propertyAddress.isEmpty() || propertyType.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Both Property Address and Property Type are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (tenantName.isEmpty() || tenantPhoneNumber.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Tenant Name and Phone Number are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (rentalStartDate.isEmpty() || rentalEndDate.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Rental Start Date and End Date are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

              
                String sql = "INSERT INTO rental_properties (property_address, property_type, tenant_name, tenant_phone, rental_start_date, rental_end_date, payment_status, monthly_rent, payment_amount, last_payment_date, property_status) "
                             + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                
                PreparedStatement pstmt = conn.prepareStatement(sql);

               
                pstmt.setString(1, propertyAddress);
                pstmt.setString(2, propertyType);
                pstmt.setString(3, tenantName);
                pstmt.setString(4, tenantPhoneNumber);

            
                pstmt.setDate(5, Date.valueOf(rentalStartDate)); 
                pstmt.setDate(6, Date.valueOf(rentalEndDate));  

                pstmt.setString(7, paymentStatus);
                pstmt.setDouble(8, Double.parseDouble(monthlyRent)); 
                pstmt.setDouble(9, Double.parseDouble(paymentAmount)); 

             
                pstmt.setDate(10, Date.valueOf(lastPaymentDate)); 
                pstmt.setString(11, propertyStatus);

               
                int rowsInserted = pstmt.executeUpdate();

                if (rowsInserted > 0) {
                    JOptionPane.showMessageDialog(null, "A new property was inserted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to insert the property.", "Insertion Failed", JOptionPane.WARNING_MESSAGE);
                }

              
                pstmt.close();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(null, "Invalid date format. Please use yyyy-MM-dd format.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
            } finally {
               
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error closing connection: " + e.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Failed to connect to the database.", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    

    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
      Connection conn = DBConnection.getConnection(); 

        if (conn != null) {
            try {
              
                String sql = "UPDATE rental_properties SET " +
                             "property_address = ?, property_type = ?, tenant_name = ?, tenant_phone = ?, " +
                             "rental_start_date = ?, rental_end_date = ?, payment_status = ?, monthly_rent = ?, " +
                             "payment_amount = ?, last_payment_date = ?, property_status = ? " +
                             "WHERE property_id = ?"; 

             
                PreparedStatement pstmt = conn.prepareStatement(sql);

                int propertyID = Integer.parseInt(t1.getText().trim());  
                String propertyAddress = t2.getText().trim();
                String propertyType = t3.getText().trim();
                String tenantName = t4.getText().trim();
                String tenantPhoneNumber = t5.getText().trim();
                String rentalStartDate = t6.getText().trim();
                String rentalEndDate = t7.getText().trim();
                String paymentStatus = t8.getText().trim();
                String monthlyRent = t9.getText().trim();
                String paymentAmount = t10.getText().trim();
                String lastPaymentDate = t11.getText().trim();
                String propertyStatus = t12.getText().trim();

             
                if (propertyAddress.isEmpty() || propertyType.isEmpty() || tenantName.isEmpty() || tenantPhoneNumber.isEmpty()) {
                  
                    JOptionPane.showMessageDialog(null, "Property Address, Property Type, Tenant Name, and Tenant Phone are required fields.", 
                                                  "Input Error", JOptionPane.ERROR_MESSAGE);
                    return; 
                }

         
                pstmt.setString(1, propertyAddress);
                pstmt.setString(2, propertyType);
                pstmt.setString(3, tenantName);
                pstmt.setString(4, tenantPhoneNumber);
                pstmt.setString(5, rentalStartDate);
                pstmt.setString(6, rentalEndDate);
                pstmt.setString(7, paymentStatus);
                pstmt.setString(8, monthlyRent);
                pstmt.setString(9, paymentAmount);
                pstmt.setString(10, lastPaymentDate);
                pstmt.setString(11, propertyStatus);

                
                pstmt.setInt(12, propertyID); 

              
                int rowsUpdated = pstmt.executeUpdate();
                if (rowsUpdated > 0) {
                   
                    JOptionPane.showMessageDialog(null, "Property details updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                   
                    JOptionPane.showMessageDialog(null, "No record found with the specified property ID.", "Error", JOptionPane.WARNING_MESSAGE);
                }

                pstmt.close();

            } catch (SQLException e) {
               
                JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException e) {
                    
                    JOptionPane.showMessageDialog(null, "Error closing connection: " + e.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
          
            JOptionPane.showMessageDialog(null, "Failed to connect to the database.", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    

    

    }//GEN-LAST:event_b2ActionPerformed

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        Connection conn = DBConnection.getConnection();
        if (conn != null) {
            try {
              
                String sql = "DELETE FROM rental_properties WHERE property_id = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);

               
              pstmt.setInt(1, Integer.parseInt(t1.getText()));
              

               
                int rowsDeleted = pstmt.executeUpdate();
                if (rowsDeleted > 0) {
                  
                    JOptionPane.showMessageDialog(null, "A property was deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    
                    JOptionPane.showMessageDialog(null, "No record found with the specified tenant_name and tenant_phone.", "Error", JOptionPane.WARNING_MESSAGE);
                }

                
                pstmt.close();
            } catch (SQLException e) {
              
                JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            } finally {
              
                DBConnection.closeConnection(conn);
            }
        } else {
           
            JOptionPane.showMessageDialog(null, "Failed to connect to the database.", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }




    }//GEN-LAST:event_b3ActionPerformed

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_b5ActionPerformed

    private void t11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t11ActionPerformed

    private void t7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t7ActionPerformed

    private void t9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t9ActionPerformed

    private void t4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mainform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel num1;
    private javax.swing.JLabel num10;
    private javax.swing.JLabel num2;
    private javax.swing.JLabel num3;
    private javax.swing.JLabel num4;
    private javax.swing.JLabel num5;
    private javax.swing.JLabel num6;
    private javax.swing.JLabel num7;
    private javax.swing.JLabel num8;
    private javax.swing.JLabel num9;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t10;
    private javax.swing.JTextField t11;
    private javax.swing.JTextField t12;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JTextField t6;
    private javax.swing.JTextField t7;
    private javax.swing.JTextField t8;
    private javax.swing.JTextField t9;
    private javax.swing.JTable tab1;
    // End of variables declaration//GEN-END:variables
}
